import {Commit} from "../../../src/models/commit";

export interface ElectronIpcApi {
    pickGitFolder: (args?: any) => Promise<string>,
    sampleError: (args?: any) => Promise<any>,
    readDirectory: (args?: any) => Promise<any>,
    writeFile: (args?: any) => Promise<any>,
    unlink: (args?: any) => Promise<any>,
    clone: (repositoryUrl: string, directory: string) => Promise<void>
    Errors: () => Promise<any>,
    add: (args?: any) => Promise<any>,
    addAll: (args?: any) => Promise<any>,
    abortMerge: (args?: any) => Promise<any>,
    addNote: (args?: any) => Promise<any>,
    addRemote: (args?: any) => Promise<any>,
    annotatedTag: (args?: any) => Promise<any>,
    branch: (args?: any) => Promise<any>,
    checkout: (args?: any) => Promise<any>,
    commit: (args?: any) => Promise<any>,
    getConfig: (args?: any) => Promise<any>,
    getConfigAll: (args?: any) => Promise<any>,
    setConfig: (args?: any) => Promise<any>,
    currentBranch: (args?: any) => Promise<string>,
    deleteBranch: (args?: any) => Promise<any>,
    deleteRef: (args?: any) => Promise<any>,
    deleteRemote: (args?: any) => Promise<any>,
    deleteTag: (args?: any) => Promise<any>,
    expandOid: (args?: any) => Promise<any>,
    expandRef: (args?: any) => Promise<any>,
    fastForward: (args?: any) => Promise<any>,
    fetch: (args?: any) => Promise<any>,
    findMergeBase: (args?: any) => Promise<string[]>,
    findRoot: (args?: any) => Promise<any>,
    getRemoteInfo: (args?: any) => Promise<any>,
    getRemoteInfo2: (args?: any) => Promise<any>,
    hashBlob: (args?: any) => Promise<any>,
    indexPack: (args?: any) => Promise<any>,
    init: (args?: any) => Promise<any>,
    isDescendent: (args?: any) => Promise<any>,
    isIgnored: (args?: any) => Promise<any>,
    listBranches: (args?: any) => Promise<string[]>,
    listFiles: (args?: any) => Promise<any>,
    listNotes: (args?: any) => Promise<any>,
    listRemotes: (args?: any) => Promise<{ remote: string; url: string; }[]>,
    listServerRefs: (args?: any) => Promise<any>,
    listTags: (args?: any) => Promise<any>,
    log: (args?: any) => Promise<Commit[]>,
    merge: (args?: any) => Promise<any>,
    packObjects: (args?: any) => Promise<any>,
    pull: (args?: any) => Promise<any>,
    push: (args?: any) => Promise<any>,
    readBlob: (args?: any) => Promise<any>,
    readCommit: (args?: any) => Promise<any>,
    readNote: (args?: any) => Promise<any>,
    readObject: (args?: any) => Promise<any>,
    readTag: (args?: any) => Promise<any>,
    readTree: (args?: any) => Promise<any>,
    remove: (args?: any) => Promise<any>,
    removeNote: (args?: any) => Promise<any>,
    renameBranch: (args?: any) => Promise<any>,
    resetIndex: (args?: any) => Promise<any>,
    updateIndex: (args?: any) => Promise<any>,
    resolveRef: (args?: any) => Promise<any>,
    status: (args?: any) => Promise<any>,
    statusMatrix: (args?: any) => Promise<any>,
    tag: (args?: any) => Promise<any>,
    version: (args?: any) => Promise<any>,
    walk: (args?: any) => Promise<any>,
    writeBlob: (args?: any) => Promise<any>,
    writeCommit: (args?: any) => Promise<any>,
    writeObject: (args?: any) => Promise<any>,
    writeRef: (args?: any) => Promise<any>,
    writeTag: (args?: any) => Promise<any>,
    writeTree: (args?: any) => Promise<any>,
}